include: "scripts/general_functions.smk"
import datetime
from scripts.resources import Resources
from snakemake.utils import min_version

# set minimum snakemake version
min_version("7.25.0")

# load config file and genome
configfile: "config/config.yaml"

# Check config parameters for invalid values
check_config()

# load genome
genome = config["genome"]

# load resources to be used in rules
resources = Resources(genome, 
                      config["ensembl_genome_build"])
resources_spike_in = Resources(config["spike-in"]["genome"], 
                               config["spike-in"]["ensembl_genome_build"])

# Load sample information
csv = pd.read_csv("config/samples.csv")

# get wildcard values
SAMPLES = samples()
BW_INPUT_DIR = bw_input_dir()
IP_SAMPLES, CONTROL_SAMPLES = ip_samples()
CONDITIONS = conditions()
PEAK_MODE = peak_mode()

# import rules
include: "rules/fastqc.smk"
include: "rules/trimming.smk"
include: "rules/resources.smk"
include: "rules/mapping.smk"
include: "rules/deduplication.smk"
include: "rules/scale_factors.smk"
include: "rules/bigwig.smk"
include: "rules/deeptools.smk"
include: "rules/plotting.smk"
include: "rules/peaks.smk"

# Set target rule
rule all:
    input: 
        targets()
        #expand("results/peaks/narrow/{bw_input_dir}/{ip_sample}/{ip_sample}_peaks.xls", bw_input_dir=BW_INPUT_DIR, ip_sample=IP_SAMPLES)
        #expand("results/peaks/narrow/{bw_input_dir}/{condition}/{condition}_peaks.xls", bw_input_dir=BW_INPUT_DIR, condition=CONDITIONS)

# Set local rules
localrules: all

# Save snakemake terminal output to log file
time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
snake_log = f"logs/snakemake/{time}_snakemake.log"
os.makedirs("logs/snakemake", exist_ok=True)

onsuccess: 
    shell("cp -v {log} {snake_log}")
    print("Analysis finished successfully!")
onerror:
    shell("cp -v {log} {snake_log}")
    print(f"Analysis (partly) failed...\nCheck {snake_log} for details")

